const DBHelper=function(){let e="myDatabase",t=null;function n(e,n,r){return new Promise((o,a)=>{let c=t.transaction([e],"readwrite"),i=c.objectStore(e),s=n.length,u=0;n.forEach((e,t)=>{let n=i.add(e);n.onsuccess=function(){u++;let e=Math.floor(u/s*100);r&&r(e)},n.onerror=function(e){a("Error saving data: "+e.target.errorCode)}}),c.oncomplete=function(){o("All data saved successfully")},c.onerror=function(e){a("Transaction failed: "+e.target.errorCode)}})}function r(e,t,n,r){if(!e.objectStoreNames.contains(t)){r(`Store ${t} does not exist in the database.`);return}let o=e.transaction([t],"readonly"),a=o.objectStore(t),c=a.count();c.onsuccess=function(){let e=c.result;n(e>0)},c.onerror=function(e){r("Error checking store data: "+e.target.errorCode)}}function o(e,t,n,r){try{let o=e.transaction([t],"readonly"),a=o.objectStore(t),c=a.getAll();c.onsuccess=function(e){n(e.target.result)},c.onerror=function(e){r("Data fetch failed: "+e.target.errorCode)}}catch(i){r("Transaction failed: "+i)}}function a(e,t,n,r,o){try{let a=e.transaction([t],"readonly"),c=a.objectStore(t),i=c.get(o);i.onsuccess=function(e){n(e.target.result)},i.onerror=function(e){r("Data fetch failed: "+e.target.errorCode)}}catch(s){r("Transaction failed: "+s)}}function c(e,t,n,r,o,a){try{let c=e.transaction([t],"readonly"),i=c.objectStore(t),s=i.index(o),u=s.getAll(a);u.onsuccess=function(e){n(e.target.result)},u.onerror=function(e){r("Data fetch failed: "+e.target.errorCode)}}catch(f){r("Transaction failed: "+f)}}return{fnInitDB:function n(r){return new Promise((n,o)=>{let a=indexedDB.open(e,20241105);a.onupgradeneeded=function(e){t=e.target.result,r.forEach(e=>{if(!t.objectStoreNames.contains(e.name)){let n=t.createObjectStore(e.name,{keyPath:e.keyPath||null,autoIncrement:e.autoIncrement||!1});e.indices&&e.indices.forEach(e=>{n.createIndex(e.name,e.keyPath,{unique:e.unique})})}})},a.onsuccess=function(e){n(t=e.target.result)},a.onerror=function(e){o("DB initialization failed: "+e.target.errorCode)}})},fnCheckDBExists:function t(n){return n=n||e,new Promise((e,t)=>{let r=indexedDB.open(n);r.onsuccess=function(t){e(!0)},r.onupgradeneeded=function(){r.transaction.abort(),e(!1)},r.onerror=function(e){t("Error checking DB existence: "+e.target.errorCode)}})},fnSaveData:function e(n,r){return new Promise((e,o)=>{let a=t.transaction([n],"readwrite"),c=a.objectStore(n),i=c.put(r);i.onsuccess=function(t){e(r)},i.onerror=function(e){o("Data save failed: "+e.target.errorCode)}})},fnBulkSaveData:function e(n,r){return new Promise((e,o)=>{let a=t.transaction([n],"readwrite"),c=a.objectStore(n);r.forEach(e=>{c.put(e)}),a.oncomplete=function(){e("All data saved successfully")},a.onerror=function(e){o("Bulk save failed: "+e.target.errorCode)}})},fnLoadAndSaveJSON:function e(t,r,o,a){return fetch(t).then(e=>e.json()).then(e=>{let t;if(o){if(!Array.isArray(t=e[o]))throw Error(`Loaded JSON does not contain valid array at keyPath: ${o}`)}else if(Array.isArray(e))t=e;else throw Error("Loaded JSON is not a valid array or does not contain an array at the root.");return n(r,t,a)}).catch(e=>{throw console.error("Error loading JSON file:",e),e})},fnSaveLargeJSONToDB:n,fnGetDataByKey:function n(r,o){return new Promise((n,c)=>{if(t)a(t,r,n,c,o);else{let i=indexedDB.open(e,20241105);i.onsuccess=function(e){a(t=e.target.result,r,n,c,o)},i.onerror=function(e){c("Database open error: "+e.target.errorCode)}}})},fnGetDataByIndex:function n(r,o,a){return new Promise((n,i)=>{if(t)c(t,r,n,i,o,a);else{let s=indexedDB.open(e,20241105);s.onsuccess=function(e){c(t=e.target.result,r,n,i,o,a)},s.onerror=function(e){i("Database open error: "+e.target.errorCode)}}})},fnGetAllData:function n(r){return new Promise((n,a)=>{if(t)o(t,r,n,a);else{let c=indexedDB.open(e,20241105);c.onsuccess=function(e){o(t=e.target.result,r,n,a)},c.onerror=function(e){a("Database open error: "+e.target.errorCode)}}})},fnDeleteDB:function t(n){return n=n||e,new Promise((e,t)=>{let r=indexedDB.deleteDatabase(n);r.onsuccess=function(){e("Database deleted successfully")},r.onerror=function(e){t("Database deletion failed: "+e.target.errorCode)}})},fnCheckStoreHasData:function n(o){return new Promise((n,a)=>{if(t)r(t,o,n,a);else{let c=indexedDB.open(e,20241105);c.onsuccess=function(e){r(t=e.target.result,o,n,a)},c.onerror=function(e){a("Database open error: "+e.target.errorCode)}}})}}}();